BeforeExecute
-- SapHana.Odbc SapHanaOdbc

DROP PROCEDURE DROPEXISTINGTABLE

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE DROPEXISTINGTABLE
( 	IN TABLENAME VARCHAR(50),
	IN SCHEMANAME VARCHAR(50)
) LANGUAGE SQLSCRIPT AS MYROWID INTEGER;
BEGIN
MYROWID := 0;
SELECT COUNT(*) INTO MYROWID FROM TABLES WHERE SCHEMA_NAME =:SCHEMANAME and TABLE_NAME=:TABLENAME;
IF (:MYROWID > 0 ) THEN
	EXEC 'DROP TABLE '||:SCHEMANAME||'."'||:TABLENAME||'"';
END IF;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

DROP PROCEDURE DROPEXISTINGPROCEDURE

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE DROPEXISTINGPROCEDURE
( 	IN PROCEDURENAME VARCHAR(50),
	IN SCHEMANAME VARCHAR(50)
) LANGUAGE SQLSCRIPT AS MYROWID INTEGER;
BEGIN
MYROWID := 0;
SELECT COUNT(*) INTO MYROWID FROM PROCEDURES WHERE SCHEMA_NAME =:SCHEMANAME and PROCEDURE_NAME=:PROCEDURENAME;
IF (:MYROWID > 0 ) THEN
	EXEC 'DROP PROCEDURE '||:SCHEMANAME||'."'||:PROCEDURENAME||'"';
END IF;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

DROP PROCEDURE DROPEXISTINGFUNCTION

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE DROPEXISTINGFUNCTION
( 	IN FUNCTIONNAME VARCHAR(50),
	IN SCHEMANAME VARCHAR(50)
) LANGUAGE SQLSCRIPT AS MYROWID INTEGER;
BEGIN
MYROWID := 0;
SELECT COUNT(*) INTO MYROWID FROM FUNCTIONS WHERE SCHEMA_NAME =:SCHEMANAME and FUNCTION_NAME=:FUNCTIONNAME;
IF (:MYROWID > 0 ) THEN
	EXEC 'DROP FUNCTION '||:SCHEMANAME||'."'||:FUNCTIONNAME||'"';
END IF;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

DROP PROCEDURE DROPEXISTINGVIEW

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE DROPEXISTINGVIEW
( 	IN VIEWNAME VARCHAR(50),
	IN SCHEMANAME VARCHAR(50)
) LANGUAGE SQLSCRIPT AS MYROWID INTEGER;
BEGIN
MYROWID := 0;
SELECT COUNT(*) INTO MYROWID FROM VIEWS WHERE SCHEMA_NAME =:SCHEMANAME and VIEW_NAME=:VIEWNAME;
IF (:MYROWID > 0 ) THEN
	EXEC 'DROP VIEW '||:SCHEMANAME||'."'||:VIEWNAME||'"';
END IF;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

DROP PROCEDURE DROPCONSTRAINTFROMTABLE

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE DROPCONSTRAINTFROMTABLE
( 	IN TABLENAME VARCHAR(50),
	IN CONSTRAINTNAME VARCHAR(100),
	IN SCHEMANAME VARCHAR(50)
) LANGUAGE SQLSCRIPT AS MYROWID INTEGER;
BEGIN
MYROWID := 0;
SELECT COUNT(*) INTO MYROWID FROM TABLES WHERE SCHEMA_NAME =:SCHEMANAME and TABLE_NAME=:TABLENAME;
IF (:MYROWID > 0 ) THEN
	EXEC 'ALTER TABLE '||:SCHEMANAME||'."'||:TABLENAME||'" DROP CONSTRAINT "' || :CONSTRAINTNAME ||'"';
END IF;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('InheritanceParent', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE TABLE "InheritanceParent"
(
	"InheritanceParentId" INTEGER        NOT NULL,
	"TypeDiscriminator"   INTEGER            NULL,
	"Name"                NVARCHAR(50)       NULL,

	PRIMARY KEY ("InheritanceParentId")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('InheritanceChild', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE TABLE "InheritanceChild"
(
	"InheritanceChildId"  INTEGER       NOT NULL,
	"InheritanceParentId" INTEGER       NOT NULL,
	"TypeDiscriminator"   INTEGER           NULL,
	"Name"                NVARCHAR(50)      NULL,

	PRIMARY KEY ("InheritanceChildId")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('Doctor', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('Patient', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('Person', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "Person" (
	"PersonID" INTEGER CS_INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	 "FirstName" NVARCHAR(50) NOT NULL ,
	 "LastName" NVARCHAR(50) NOT NULL ,
	 "MiddleName" NVARCHAR(50) NULL ,
	 "Gender" CHAR(1) NOT NULL ,
	 PRIMARY KEY ("PersonID")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "Person"("FirstName","LastName","Gender") VALUES ('John',   'Pupkin',    'M')

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "Person"("FirstName","LastName","Gender") VALUES ('Tester', 'Testerson', 'M')

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "Person"("FirstName","LastName","Gender") VALUES ('Jane',   'Doe',       'F')

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "Person"("FirstName","LastName","MiddleName","Gender") VALUES ('Jürgen', 'König', 'Ko', 'M')

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "Doctor"
(
	"PersonID" INTEGER NOT NULL,
	"Taxonomy" nvarchar(50) NOT NULL,
	PRIMARY KEY ("PersonID")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

ALTER TABLE "Doctor" ADD CONSTRAINT "FK_Doctor_Person" FOREIGN KEY ("PersonID") REFERENCES "Person" ("PersonID") ON UPDATE CASCADE ON DELETE CASCADE

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "Doctor" ("PersonID", "Taxonomy") VALUES (1, 'Psychiatry')

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "Patient"
(
	"PersonID" INTEGER NOT NULL,
	"Diagnosis" NVARCHAR(256) NOT NULL,
	PRIMARY KEY ("PersonID")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

ALTER TABLE "Patient" ADD CONSTRAINT "FK_Patient_Person" FOREIGN KEY ("PersonID") REFERENCES "Person" ("PersonID") ON UPDATE CASCADE ON DELETE CASCADE

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "Patient" ("PersonID", "Diagnosis") VALUES (2, 'Hallucination with Paranoid Bugs'' Delirium of Persecution')

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Person_SelectByKey', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Person_SelectByKey"
( IN ID INTEGER
) LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT * FROM "Person" WHERE "PersonID" = :ID;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Person_SelectAll', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Person_SelectAll"
(
) LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT * FROM "Person";
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Person_SelectByName', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Person_SelectByName"
(
	IN FirstName NVARCHAR(50),
	IN LastName NVARCHAR(50)
) LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT * FROM "Person" WHERE "FirstName" = :FirstName AND "LastName" = :LastName;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Person_SelectListByName', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Person_SelectListByName"
(
	IN FirstName NVARCHAR(50),
	IN LastName NVARCHAR(50)
) LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT * FROM "Person" WHERE "FirstName" LIKE :FirstName AND "LastName" LIKE :LastName;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Person_Insert', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Person_Insert"
(
	IN FirstName NVARCHAR(50),
	IN LastName NVARCHAR(50),
	IN MiddleName NVARCHAR(50),
	IN Gender CHAR(1)
) LANGUAGE SQLSCRIPT AS
BEGIN
	INSERT INTO "Person"("LastName", "FirstName", "MiddleName", "Gender")
	VALUES (:LastName, :FirstName, :MiddleName, :Gender);
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Person_Insert_OutputParameter', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Person_Insert_OutputParameter"
(
	IN FirstName NVARCHAR(50),
	IN LastName NVARCHAR(50),
	IN MiddleName NVARCHAR(50),
	IN Gender CHAR(1),
	OUT PersonID INTEGER
) LANGUAGE SQLSCRIPT AS
BEGIN
	INSERT INTO "Person"("LastName", "FirstName", "MiddleName", "Gender")
	VALUES (:LastName, :FirstName, :MiddleName, :Gender);

	SELECT MAX("PersonID") INTO PersonID FROM "Person";
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Person_Update', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Person_Update"
(	IN PersonID INTEGER,
	IN FirstName NVARCHAR(50),
	IN LastName NVARCHAR(50),
	IN MiddleName NVARCHAR(50),
	IN Gender CHAR(1)
) LANGUAGE SQLSCRIPT AS
BEGIN
	UPDATE "Person"
	SET
		"FirstName" = :FirstName,
		"LastName" = :LastName,
		"MiddleName" = :MiddleName,
		"Gender" = :Gender
	WHERE
		"PersonID" = :PersonID;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Person_Delete', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Person_Delete"
(	IN PersonID INTEGER
) LANGUAGE SQLSCRIPT AS
BEGIN
	DELETE FROM "Person" WHERE "PersonID" = :PersonID;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Patient_SelectAll', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Patient_SelectAll"
(
) LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT "Person".*, "Patient"."Diagnosis"
	FROM "Person", "Patient"
	WHERE
		"Person"."PersonID" = "Patient"."PersonID";
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('Patient_SelectByName', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "Patient_SelectByName"
(
	IN FirstName NVARCHAR(50),
	IN LastName NVARCHAR(50)
) LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT "Person".*, "Patient"."Diagnosis"
	FROM "Person", "Patient"
	WHERE
		"Person"."PersonID" = "Patient"."PersonID"
		AND "FirstName" = :FirstName AND "LastName" = :LastName;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('OutRefTest', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "OutRefTest"
(
	IN	ID             INTEGER,
	OUT	outputID       INTEGER,
	INOUT	inputOutputID  INTEGER,
	IN str            VARCHAR(50),
	OUT outputStr      VARCHAR(50),
	INOUT inputOutputStr VARCHAR(50)
) LANGUAGE SQLSCRIPT AS
BEGIN
	outputID := ID;
	inputOutputID := ID + inputOutputID;
	outputStr := str;
	inputOutputStr := str || inputOutputStr;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('OutRefEnumTest', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "OutRefEnumTest"
(
	IN str            VARCHAR(50),
	OUT outputStr      VARCHAR(50),
	INOUT inputOutputStr VARCHAR(50)
) LANGUAGE SQLSCRIPT AS
BEGIN
	outputStr := str;
	inputOutputStr := str || inputOutputStr;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('AllTypes', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "AllTypes"
(
	ID INTEGER CS_INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"bigintDataType" BIGINT NULL,
	"smallintDataType" SMALLINT NULL,
	"decimalDataType" DECIMAL NULL,
	"smalldecimalDataType" SMALLDECIMAL NULL,
	"intDataType" INTEGER NULL,
	"tinyintDataType" TINYINT NULL,
	"floatDataType" FLOAT NULL,
	"realDataType" REAL NULL,

	"dateDataType" DATE NULL,
	"timeDataType" TIME NULL,
	"seconddateDataType" SECONDDATE NULL,
	"timestampDataType" TIMESTAMP NULL,

	"charDataType" CHAR(1) NULL,
	"char20DataType" CHAR(20) NULL,
	"varcharDataType" VARCHAR(20) NULL,
	"textDataType" TEXT NULL,
	"shorttextDataType" SHORTTEXT(20) NULL,
	"ncharDataType" NCHAR(1) NULL,
	"nchar20DataType" NCHAR(20) NULL,
	"nvarcharDataType" NVARCHAR(20) NULL,
	"alphanumDataType" ALPHANUM(20) NULL,

	"binaryDataType" BINARY(10) NULL,
	"varbinaryDataType" VARBINARY(10) NULL,

	"blobDataType" BLOB NULL,
	"clobDataType" CLOB NULL,
	"nclobDataType" NCLOB NULL,
	PRIMARY KEY ("ID")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypes"
(
	"bigintDataType", "smallintDataType", "decimalDataType", "smalldecimalDataType", "intDataType", "tinyintDataType", "floatDataType", "realDataType",
	"dateDataType", "timeDataType", "seconddateDataType", "timestampDataType",
	"charDataType", "varcharDataType", "textDataType", "shorttextDataType", "ncharDataType", "nvarcharDataType", "alphanumDataType",
	"binaryDataType", "varbinaryDataType",
	"blobDataType", "clobDataType", "nclobDataType"
) VALUES(
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
	NULL, NULL, NULL, NULL,
	NULL, NULL, NULL, NULL, NULL, NULL, NULL,
	NULL, NULL,
	NULL, NULL,  NULL)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypes"
(
	"bigintDataType", "smallintDataType", "decimalDataType", "smalldecimalDataType", "intDataType", "tinyintDataType", "floatDataType", "realDataType",
	"dateDataType", "timeDataType", "seconddateDataType", "timestampDataType",
	"charDataType", "varcharDataType", "textDataType", "shorttextDataType", "ncharDataType", "nvarcharDataType", "alphanumDataType",
	"binaryDataType", "varbinaryDataType",
	"blobDataType", "clobDataType", "nclobDataType"
) VALUES(
	123456789123456789, 12345, 1234.567, 123.456, 123456789, 123, 1234.567, 1234.567,
	'2012-12-12', '12:12:12', '2012-12-12 12:12:12', '2012-12-12 12:12:12.123',
	'1', 'bcd', 'abcdefgh', 'def', 'ą',  'ąčęėįš', 'qwert123QWE',
	CAST( 'abcdefgh' AS BINARY), CAST( 'abcdefgh' AS VARBINARY),
	'abcdefgh', 'qwertyuiop', 'ąčęėįšqwerty123456' )

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('AllTypesGeo', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "AllTypesGeo"
(
	ID INTEGER CS_INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"dataType" varchar(20) NULL,
	"stgeometryDataType" ST_GEOMETRY NULL,
	PRIMARY KEY ("ID")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypesGeo" ("dataType", "stgeometryDataType")
VALUES (NULL, NULL)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypesGeo" ("dataType", "stgeometryDataType")
VALUES ('POINT', NEW ST_POINT('POINT(0.0 0.0)'))

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypesGeo" ("dataType", "stgeometryDataType")
VALUES ('POLYGON', NEW ST_POLYGON('POLYGON((6.0 7.0, 10.0 3.0, 10.0 10.0, 6.0 7.0))'))

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypesGeo" ("dataType", "stgeometryDataType")
VALUES ('LINESTRING', NEW ST_LINESTRING('LINESTRING(3.0 3.0, 5.0 4.0, 6.0 3.0)'))

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypesGeo" ("dataType", "stgeometryDataType")
VALUES ('MULTIPOINT', NEW ST_MULTIPOINT('MultiPoint ((10 10), (12 12), (14 10))'))

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypesGeo" ("dataType", "stgeometryDataType")
VALUES ('MULTIPOLYGON', NEW ST_MultiPolygon('MultiPolygon (((-5 -5, 5 -5, 0 5, -5 -5), (-2 -2, -2 0, 2 0, 2 -2, -2 -2)), ((10 -5, 15 5, 5 5, 10 -5)))'))

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

INSERT INTO "AllTypesGeo" ("dataType", "stgeometryDataType")
VALUES ('MULTILINESTRING', NEW ST_MultiLineString('MultiLineString ((10 10, 12 12), (14 10, 16 12))'))

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('Parent',CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('Child',CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('GrandChild',CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "Parent" (
	"ParentID" INTEGER,
	"Value1" INTEGER
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "Child" (
	"ParentID" INTEGER,
	"ChildID" INTEGER
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "GrandChild" (
	"ParentID" INTEGER,
	"ChildID" INTEGER,
	"GrandChildID" INTEGER
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGFUNCTION('GetParentByID', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE FUNCTION "GetParentByID"
(
	id INTEGER
)
RETURNS TABLE(
	"ParentID" INTEGER,
	"Value1" INTEGER
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER AS
BEGIN
	RETURN
	SELECT * FROM "Parent" WHERE "ParentID" = :id;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGVIEW('ParentView', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE VIEW "ParentView"
AS
	SELECT * FROM "Parent"

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGVIEW('ParentChildView', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE VIEW "ParentChildView"
AS
	SELECT
		p."ParentID",
		p."Value1",
		ch."ChildID"
	FROM "Parent" p
		LEFT JOIN "Child" ch ON p."ParentID" = ch."ParentID"

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('SelectImplicitColumn', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "SelectImplicitColumn"
(
) LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT 123 FROM DUMMY;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('LinqDataTypes', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "LinqDataTypes"
(
	"ID" INTEGER,
	"MoneyValue" DECIMAL(10,4),
	"DateTimeValue" TIMESTAMP,
	"DateTimeValue2" TIMESTAMP,
	"BoolValue" TINYINT,
	"GuidValue" VARCHAR(36),
	"BinaryValue" VARBINARY(5000) NULL,
	"SmallIntValue" SMALLINT,
	"IntValue" INTEGER NULL,
	"BigIntValue" BIGINT NULL,
	"StringValue" NVARCHAR(50) NULL
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('BulkInsertLowerCaseColumns', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "BulkInsertLowerCaseColumns"
(
	"ID" INTEGER,
	"MoneyValue" DECIMAL(10,4),
	"DateTimeValue" TIMESTAMP,
	"BoolValue" TINYINT,
	"GuidValue" VARCHAR(36),
	"BinaryValue" VARBINARY(5000) NULL,
	"SmallIntValue" SMALLINT,
	"IntValue" INTEGER NULL,
	"BigIntValue" BIGINT NULL
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('BulkInsertUpperCaseColumns', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "BulkInsertUpperCaseColumns"
(
	"ID" INTEGER,
	"MONEYVALUE" DECIMAL(10,4),
	"DATETIMEVALUE" TIMESTAMP,
	"BOOLVALUE" TINYINT,
	"GUIDVALUE" VARCHAR(36),
	"BINARYVALUE" VARBINARY(5000) NULL,
	"SMALLINTVALUE" SMALLINT,
	"INTVALUE" INTEGER NULL,
	"BIGINTVALUE" BIGINT NULL
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('DuplicateColumnNames', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "DuplicateColumnNames"
(
) LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT 123 as "id", '456' as "id" FROM DUMMY;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('TestIdentity',CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "TestIdentity" (
	"ID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	PRIMARY KEY ("ID")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPCONSTRAINTFROMTABLE('IndexTable2', 'FK_Patient2_IndexTable', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('IndexTable',CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "IndexTable" (
	"PKField1" INTEGER NOT NULL,
	"PKField2" INTEGER NOT NULL,
	"UniqueField" INTEGER NOT NULL,
	"IndexField" INTEGER NOT NULL,
	PRIMARY KEY ("PKField1", "PKField2")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE UNIQUE INDEX "IX_IndexTable" ON "IndexTable"("UniqueField")

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('IndexTable2',CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "IndexTable2" (
	"PKField1" INTEGER NOT NULL,
	"PKField2" INTEGER NOT NULL,
	PRIMARY KEY ("PKField1", "PKField2")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

ALTER TABLE "IndexTable2" ADD CONSTRAINT "FK_Patient2_IndexTable" FOREIGN KEY ("PKField1", "PKField2") REFERENCES "IndexTable" ("PKField1", "PKField2") ON UPDATE CASCADE ON DELETE CASCADE

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('TestMerge1', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('TestMerge2', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE TABLE "TestMerge1"
(
	"Id"       INTEGER        NOT NULL,
	"Field1"   INTEGER            NULL,
	"Field2"   INTEGER            NULL,
	"Field3"   INTEGER            NULL,
	"Field4"   INTEGER            NULL,
	"Field5"   INTEGER            NULL,

	"FieldInt64"      BIGINT            NULL,
	"FieldBoolean"    TINYINT           NULL,
	"FieldString"     VARCHAR(20)       NULL,
	"FieldNString"    NVARCHAR(20)      NULL,
	"FieldChar"       CHAR(1)           NULL,
	"FieldNChar"      NCHAR(1)          NULL,
	"FieldFloat"      FLOAT(24)         NULL,
	"FieldDouble"     FLOAT(53)         NULL,
	"FieldDateTime"   DATETIME          NULL,
	"FieldBinary"     VARBINARY(20)     NULL,
	"FieldGuid"       CHAR(36)          NULL,
	"FieldDecimal"    DECIMAL(24, 10)   NULL,
	"FieldDate"       DATE              NULL,
	"FieldTime"       TIME              NULL,
	"FieldEnumString" VARCHAR(20)       NULL,
	"FieldEnumNumber" INT               NULL,

	PRIMARY KEY ("Id")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE TABLE "TestMerge2"
(
	"Id"       INTEGER        NOT NULL,
	"Field1"   INTEGER            NULL,
	"Field2"   INTEGER            NULL,
	"Field3"   INTEGER            NULL,
	"Field4"   INTEGER            NULL,
	"Field5"   INTEGER            NULL,

	"FieldInt64"      BIGINT            NULL,
	"FieldBoolean"    TINYINT           NULL,
	"FieldString"     VARCHAR(20)       NULL,
	"FieldNString"    NVARCHAR(20)      NULL,
	"FieldChar"       CHAR(1)           NULL,
	"FieldNChar"      NCHAR(1)          NULL,
	"FieldFloat"      FLOAT(24)         NULL,
	"FieldDouble"     FLOAT(53)         NULL,
	"FieldDateTime"   DATETIME          NULL,
	"FieldBinary"     VARBINARY(20)     NULL,
	"FieldGuid"       CHAR(36)          NULL,
	"FieldDecimal"    DECIMAL(24, 10)   NULL,
	"FieldDate"       DATE              NULL,
	"FieldTime"       TIME              NULL,
	"FieldEnumString" VARCHAR(20)       NULL,
	"FieldEnumNumber" INT               NULL,

	PRIMARY KEY ("Id")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('AddIssue792Record', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "AddIssue792Record"()
LANGUAGE SQLSCRIPT AS
BEGIN
	INSERT INTO "AllTypes"("char20DataType") VALUES('issue792');
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('prd.global.ecc/CV_MARA', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE TABLE "prd.global.ecc/CV_MARA"
(
	"Id" INTEGER        NOT NULL,

	PRIMARY KEY ("Id")
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGPROCEDURE('prd.global.ecc/CV_MARAproc', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE PROCEDURE "prd.global.ecc/CV_MARAproc"()
LANGUAGE SQLSCRIPT AS
BEGIN
	SELECT 123 as "id", '456' as "id" FROM DUMMY;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CALL DROPEXISTINGTABLE('CollatedTable', CURRENT_SCHEMA)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE COLUMN TABLE "CollatedTable"
(
	"Id"				INTEGER NOT NULL,
	"CaseSensitive"		NVARCHAR(20) NOT NULL,
	"CaseInsensitive"	NVARCHAR(20) NOT NULL
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE OR REPLACE LIBRARY TEST_PACKAGE1 AS
BEGIN
	PUBLIC PROCEDURE TEST_PROCEDURE (IN i INT) AS 
	BEGIN
		SELECT i + 1 FROM dummy;
	END;
	PUBLIC FUNCTION TEST_TABLE_FUNCTION(i INT) RETURNS TABLE(O INTEGER) AS
	BEGIN
		RETURN	SELECT i + 1 AS O FROM "Person";
	END;
	PUBLIC FUNCTION TEST_FUNCTION (i INT) RETURNS o INT AS
	BEGIN
		o = :i + 1;
	END;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE OR REPLACE LIBRARY TEST_PACKAGE2 AS
BEGIN
	PUBLIC PROCEDURE TEST_PROCEDURE (IN i INT) AS 
	BEGIN
		SELECT i + 2 FROM dummy;
	END;
	PUBLIC FUNCTION TEST_TABLE_FUNCTION(i INT) RETURNS TABLE(O INTEGER) AS
	BEGIN
		RETURN	SELECT i + 2 AS O FROM "Person";
	END;
	PUBLIC FUNCTION TEST_FUNCTION (i INT) RETURNS o INT AS
	BEGIN
		o = :i + 2;
	END;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE OR REPLACE PROCEDURE TEST_PROCEDURE (IN i INT) AS
BEGIN
	SELECT i + 3 FROM dummy;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE OR REPLACE FUNCTION TEST_TABLE_FUNCTION(i INT) RETURNS TABLE(O INTEGER) AS
BEGIN
	RETURN	SELECT i + 3 AS O FROM "Person";
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc

CREATE OR REPLACE FUNCTION TEST_FUNCTION (i INT) RETURNS o INT AS
BEGIN
	o = :i + 3;
END

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 1
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 1.11
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2001-01-11 01:11:21.100'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 1
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = 'ef129165-6ffe-4df9-bb6b-bb16e413c883'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 1
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = 1
DECLARE @StringValue NVarChar -- String
SET     @StringValue = NULL

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 2
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 2.49
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2005-05-15 05:15:25.500'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 0
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = 'bc663a61-7b40-4681-ac38-f9aaf55b706b'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 2
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = 2
DECLARE @StringValue NVarChar -- String
SET     @StringValue = ''

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 3
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 3.99
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-19 09:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 1
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = 'd2f970c0-35ac-4987-9cd5-5badb1757436'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 3
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '1'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 4
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 4.50
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-20 09:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 0
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = '40932fdb-1543-4e4a-ac2c-ca371604fb4b'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 4
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '2'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 5
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 5.50
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-20 09:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 1
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = 'febe3eca-cb5f-40b2-ad39-2979d312afca'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 5
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '3'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 6
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 6.55
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-22 09:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 0
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = '8d3c5d1d-47db-4730-9fe7-968f6228a4c0'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 6
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '4'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 7
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 7.00
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-23 09:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 1
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = '48094115-83af-46dd-a906-bff26ee21ee2'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 7
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '5'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 8
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 8.99
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-24 09:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 0
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = 'c1139f1f-1335-4cd4-937e-92602f732dd3'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 8
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '6'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 9
DECLARE @MoneyValue Decimal(3, 2)
SET     @MoneyValue = 9.63
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-25 09:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 1
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = '46c5c512-3d4b-4cf7-b4e7-1de080789e5d'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 9
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '7'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 10
DECLARE @MoneyValue Decimal(4, 2)
SET     @MoneyValue = 10.77
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-26 09:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 0
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = '61b2bc55-147f-4b40-93ed-a4aa83602fee'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 10
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '8'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 11
DECLARE @MoneyValue Decimal(4, 2)
SET     @MoneyValue = 11.45
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2009-09-27'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 1
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = 'd3021d18-97f0-4dc0-98d0-f0c7df4a1230'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 11
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '9'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ID  -- Int32
SET     @ID = 12
DECLARE @MoneyValue Decimal(4, 2)
SET     @MoneyValue = 11.45
DECLARE @DateTimeValue  -- DateTime
SET     @DateTimeValue = '2012-11-07 19:19:29.090'
DECLARE @DateTimeValue2  -- DateTime
SET     @DateTimeValue2 = NULL
DECLARE @BoolValue  -- Byte
SET     @BoolValue = 1
DECLARE @GuidValue Char(36) -- AnsiStringFixedLength
SET     @GuidValue = '03021d18-97f0-4dc0-98d0-f0c7df4a1230'
DECLARE @SmallIntValue  -- Int16
SET     @SmallIntValue = 12
DECLARE @IntValue  -- Int32
SET     @IntValue = NULL
DECLARE @BigIntValue  -- Int64
SET     @BigIntValue = NULL
DECLARE @StringValue NVarChar(1) -- String
SET     @StringValue = '0'

INSERT INTO "LinqDataTypes"
(
	"ID",
	"MoneyValue",
	"DateTimeValue",
	"DateTimeValue2",
	"BoolValue",
	"GuidValue",
	"SmallIntValue",
	"IntValue",
	"BigIntValue",
	"StringValue"
)
VALUES
(
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 1
DECLARE @Value1  -- Int32
SET     @Value1 = 1

INSERT INTO "Parent"
(
	"ParentID",
	"Value1"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 2
DECLARE @Value1  -- Int32
SET     @Value1 = NULL

INSERT INTO "Parent"
(
	"ParentID",
	"Value1"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @Value1  -- Int32
SET     @Value1 = 3

INSERT INTO "Parent"
(
	"ParentID",
	"Value1"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @Value1  -- Int32
SET     @Value1 = NULL

INSERT INTO "Parent"
(
	"ParentID",
	"Value1"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 5
DECLARE @Value1  -- Int32
SET     @Value1 = 5

INSERT INTO "Parent"
(
	"ParentID",
	"Value1"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 6
DECLARE @Value1  -- Int32
SET     @Value1 = 6

INSERT INTO "Parent"
(
	"ParentID",
	"Value1"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 7
DECLARE @Value1  -- Int32
SET     @Value1 = 1

INSERT INTO "Parent"
(
	"ParentID",
	"Value1"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 1
DECLARE @ChildID  -- Int32
SET     @ChildID = 11

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 2
DECLARE @ChildID  -- Int32
SET     @ChildID = 21

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 2
DECLARE @ChildID  -- Int32
SET     @ChildID = 22

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 31

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 32

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 33

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 41

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 42

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 43

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 44

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 6
DECLARE @ChildID  -- Int32
SET     @ChildID = 61

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 6
DECLARE @ChildID  -- Int32
SET     @ChildID = 62

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 6
DECLARE @ChildID  -- Int32
SET     @ChildID = 63

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 6
DECLARE @ChildID  -- Int32
SET     @ChildID = 64

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 6
DECLARE @ChildID  -- Int32
SET     @ChildID = 65

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 6
DECLARE @ChildID  -- Int32
SET     @ChildID = 66

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 7
DECLARE @ChildID  -- Int32
SET     @ChildID = 77

INSERT INTO "Child"
(
	"ParentID",
	"ChildID"
)
VALUES
(
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 1
DECLARE @ChildID  -- Int32
SET     @ChildID = 11
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 111

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 2
DECLARE @ChildID  -- Int32
SET     @ChildID = 21
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 211

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 2
DECLARE @ChildID  -- Int32
SET     @ChildID = 21
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 212

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 2
DECLARE @ChildID  -- Int32
SET     @ChildID = 22
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 221

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 2
DECLARE @ChildID  -- Int32
SET     @ChildID = 22
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 222

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 31
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 311

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 31
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 312

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 31
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 313

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 32
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 321

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 32
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 322

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 32
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 323

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 33
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 331

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 33
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 332

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 3
DECLARE @ChildID  -- Int32
SET     @ChildID = 33
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 333

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 41
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 411

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 41
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 412

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 41
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 413

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 41
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 414

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 42
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 421

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 42
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 422

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 42
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 423

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @ParentID  -- Int32
SET     @ParentID = 4
DECLARE @ChildID  -- Int32
SET     @ChildID = 42
DECLARE @GrandChildID  -- Int32
SET     @GrandChildID = 424

INSERT INTO "GrandChild"
(
	"ParentID",
	"ChildID",
	"GrandChildID"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @InheritanceParentId  -- Int32
SET     @InheritanceParentId = 1
DECLARE @TypeDiscriminator  -- Int32
SET     @TypeDiscriminator = NULL
DECLARE @Name NVarChar -- String
SET     @Name = NULL

INSERT INTO "InheritanceParent"
(
	"InheritanceParentId",
	"TypeDiscriminator",
	"Name"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @InheritanceParentId  -- Int32
SET     @InheritanceParentId = 2
DECLARE @TypeDiscriminator  -- Int32
SET     @TypeDiscriminator = 1
DECLARE @Name NVarChar -- String
SET     @Name = NULL

INSERT INTO "InheritanceParent"
(
	"InheritanceParentId",
	"TypeDiscriminator",
	"Name"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @InheritanceParentId  -- Int32
SET     @InheritanceParentId = 3
DECLARE @TypeDiscriminator  -- Int32
SET     @TypeDiscriminator = 2
DECLARE @Name NVarChar(18) -- String
SET     @Name = 'InheritanceParent2'

INSERT INTO "InheritanceParent"
(
	"InheritanceParentId",
	"TypeDiscriminator",
	"Name"
)
VALUES
(
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @InheritanceChildId  -- Int32
SET     @InheritanceChildId = 1
DECLARE @TypeDiscriminator  -- Int32
SET     @TypeDiscriminator = NULL
DECLARE @InheritanceParentId  -- Int32
SET     @InheritanceParentId = 1
DECLARE @Name NVarChar -- String
SET     @Name = NULL

INSERT INTO "InheritanceChild"
(
	"InheritanceChildId",
	"TypeDiscriminator",
	"InheritanceParentId",
	"Name"
)
VALUES
(
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @InheritanceChildId  -- Int32
SET     @InheritanceChildId = 2
DECLARE @TypeDiscriminator  -- Int32
SET     @TypeDiscriminator = 1
DECLARE @InheritanceParentId  -- Int32
SET     @InheritanceParentId = 2
DECLARE @Name NVarChar -- String
SET     @Name = NULL

INSERT INTO "InheritanceChild"
(
	"InheritanceChildId",
	"TypeDiscriminator",
	"InheritanceParentId",
	"Name"
)
VALUES
(
	?,
	?,
	?,
	?
)

BeforeExecute
-- SapHana.Odbc SapHanaOdbc
DECLARE @InheritanceChildId  -- Int32
SET     @InheritanceChildId = 3
DECLARE @TypeDiscriminator  -- Int32
SET     @TypeDiscriminator = 2
DECLARE @InheritanceParentId  -- Int32
SET     @InheritanceParentId = 3
DECLARE @Name NVarChar(18) -- String
SET     @Name = 'InheritanceParent2'

INSERT INTO "InheritanceChild"
(
	"InheritanceChildId",
	"TypeDiscriminator",
	"InheritanceParentId",
	"Name"
)
VALUES
(
	?,
	?,
	?,
	?
)

